(static-when (locate-library "cmuscheme")
  (static-when (executable-find "gosh")
    (setq scheme-program-name "gosh -i")
    (static-if (fboundp 'modify-coding-system-alist)
	(modify-coding-system-alist 'process "gosh" '(utf-8 . utf-8)))
    (setq process-coding-system-alist
	  (cons '("gosh" utf-8 . utf-8) process-coding-system-alist)))
  (autoload 'scheme-mode "cmuscheme" "Major mode for Scheme." t)
  (autoload 'run-scheme "cmuscheme" "Run an inferior Scheme process." t)

  (defun scheme-other-window ()
    "Run scheme on other window"
    (interactive)
    (switch-to-buffer-other-window
     (get-buffer-create "*scheme*"))
    (run-scheme scheme-program-name))
  (define-key my-prefix-map "S" 'scheme-other-window)

  (when t
    ;; Gaucheのインデント設定
    ;; http://karetta.jp/book-node/kahua-seminar2/000735
    (put 'and-let* 'scheme-indent-function 1)
    (put 'begin0 'scheme-indent-function 0)
    (put 'call-with-client-socket 'scheme-indent-function 1)
    (put 'call-with-input-conversion 'scheme-indent-function 1)
    (put 'call-with-input-file 'scheme-indent-function 1)
    (put 'call-with-input-process 'scheme-indent-function 1)
    (put 'call-with-input-string 'scheme-indent-function 1)
    (put 'call-with-iterator 'scheme-indent-function 1)
    (put 'call-with-output-conversion 'scheme-indent-function 1)
    (put 'call-with-output-file 'scheme-indent-function 1)
    (put 'call-with-output-string 'scheme-indent-function 0)
    (put 'call-with-temporary-file 'scheme-indent-function 1)
    (put 'call-with-values 'scheme-indent-function 1)
    (put 'dolist 'scheme-indent-function 1)
    (put 'dotimes 'scheme-indent-function 1)
    (put 'if-match 'scheme-indent-function 2)
    (put 'let*-values 'scheme-indent-function 1)
    (put 'let-args 'scheme-indent-function 2)
    (put 'let-keywords* 'scheme-indent-function 2)
    (put 'let-match 'scheme-indent-function 2)
    (put 'let-optionals* 'scheme-indent-function 2)
    (put 'let-syntax 'scheme-indent-function 1)
    (put 'let-values 'scheme-indent-function 1)
    (put 'let/cc 'scheme-indent-function 1)
    (put 'let1 'scheme-indent-function 2)
    (put 'letrec-syntax 'scheme-indent-function 1)
    (put 'make 'scheme-indent-function 1)
    (put 'match 'scheme-indent-function 1)
    (put 'match-lambda 'scheme-indent-function 1)
    (put 'match-let 'scheme-indent-fucntion 1)
    (put 'match-let* 'scheme-indent-fucntion 1)
    (put 'match-letrec 'scheme-indent-fucntion 1)
    (put 'match-let1 'scheme-indent-function 2)
    (put 'match-define 'scheme-indent-fucntion 1)
    (put 'multiple-value-bind 'scheme-indent-function 2)
    (put 'parameterize 'scheme-indent-function 1)
    (put 'parse-options 'scheme-indent-function 1)
    (put 'receive 'scheme-indent-function 2)
    (put 'rxmatch-case 'scheme-indent-function 1)
    (put 'rxmatch-cond 'scheme-indent-function 0)
    (put 'rxmatch-if  'scheme-indent-function 2)
    (put 'rxmatch-let 'scheme-indent-function 2)
    (put 'syntax-rules 'scheme-indent-function 1)
    (put 'unless 'scheme-indent-function 1)
    (put 'until 'scheme-indent-function 1)
    (put 'when 'scheme-indent-function 1)
    (put 'while 'scheme-indent-function 1)
    (put 'with-builder 'scheme-indent-function 1)
    (put 'with-error-handler 'scheme-indent-function 0)
    (put 'with-error-to-port 'scheme-indent-function 1)
    (put 'with-input-conversion 'scheme-indent-function 1)
    (put 'with-input-from-port 'scheme-indent-function 1)
    (put 'with-input-from-process 'scheme-indent-function 1)
    (put 'with-input-from-string 'scheme-indent-function 1)
    (put 'with-iterator 'scheme-indent-function 1)
    (put 'with-module 'scheme-indent-function 1)
    (put 'with-output-conversion 'scheme-indent-function 1)
    (put 'with-output-to-port 'scheme-indent-function 1)
    (put 'with-output-to-process 'scheme-indent-function 1)
    (put 'with-output-to-string 'scheme-indent-function 1)
    (put 'with-port-locking 'scheme-indent-function 1)
    (put 'with-string-io 'scheme-indent-function 1)
    (put 'with-time-counter 'scheme-indent-function 1)
    (put 'with-signal-handlers 'scheme-indent-function 1)
    )
  ;; debian なら gauche-doc パッケージを入れる。
  (static-when (file-exists-p "/usr/share/info/gauche-refe.info.gz")
    ;; http://blog.livedoor.jp/naoya_t/archives/51350496.html
    (defun gauche-info-index (topic)
      (interactive
       (list (read-string
              (concat "Gauche help topic : ")
              (current-word))))
      (switch-to-buffer-other-window (get-buffer-create "*info*"))
      (info "/usr/share/info/gauche-refe.info.gz")
      (Info-index topic))
    ;;(define-key global-map "\C-xH" 'gauche-info-index)
    )
  )

;;; Local Variables:
;;; mode: emacs-lisp
;;; coding: utf-8
;;; indent-tabs-mode: nil
;;; End:
